import java.io.IOException;
import java.util.*;
import org.apache.spark.SparkConf;
import org.apache.spark.SparkContext;
import org.apache.spark.ml.Pipeline;
import org.apache.spark.ml.PipelineModel;
import org.apache.spark.ml.PipelineStage;
import org.apache.spark.ml.classification.RandomForestClassifier;
import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator;
import org.apache.spark.ml.feature.*;
import org.apache.spark.sql.*;
import org.apache.spark.sql.Dataset;

public class MalwareModelGenerator {

    public static void main(String[] args) throws  IOException {
        String path = args[0];//"hdfs://localhost:9000/user/Nikola/nikola/trainingdata.csv";//"C:\\Users\\Nikola\\IdeaProjects\\malware-prediction\\src\\data\\UNSW_NB15_training-set.csv";
        String pathTest = args[1];//"hdfs://localhost:9000/user/Nikola/nikola/testingdata.csv";//"C:\\Users\\Nikola\\IdeaProjects\\malware-prediction\\src\\data\\UNSW_NB15_testing-set.csv";
        String modelPath = args[2];//"hdfs://localhost:9000/user/Nikola/nikola/malware-model"
        String master = args[3];//local[4]
        SparkConf conf = new SparkConf().setAppName("MalwareDetection").setMaster(master);
        conf.set("spark.driver.memory","524288000");
        conf.set("spark.executor.memory","524288000");
        conf.set("spark.testing.memory","524288000");
        SparkContext sc1= new SparkContext(conf);
        SparkSession spark = SparkSession.builder().config(conf).getOrCreate();
        Dataset data= spark.read().format("csv").option("sep",",").option("inferSchema","true").option("header","true").load(path);
        Dataset dataTest= spark.read().format("csv").option("sep",",").option("inferSchema","true").option("header","true").load(pathTest);
        Dataset<Row> dataset = data.cache();
        Dataset<Row> datasetTest = dataTest.cache();
        List<String> columns = new ArrayList<String>(Arrays.asList(dataset.columns()));
        columns.remove(columns.size()-1);
        StringIndexer indexer = new StringIndexer().setInputCol("isMalware").setOutputCol("label");
        VectorAssembler assembler =  new VectorAssembler().setInputCols(columns.subList(0,columns.size()).stream().toArray(String[]::new)).setOutputCol("features");
        RandomForestClassifier classifier = new RandomForestClassifier().setImpurity("gini").setMaxDepth(3).setNumTrees(20).setFeatureSubsetStrategy("auto");
        Pipeline pipeline = new Pipeline().setStages(new PipelineStage[] {assembler,indexer,classifier});
        PipelineModel model = pipeline.fit(dataset);
        model.write().overwrite().save(modelPath);
        Dataset<Row> result = model.transform(datasetTest);
        result.show();

        BinaryClassificationEvaluator evaluator = new BinaryClassificationEvaluator().setLabelCol("label").setMetricName("areaUnderROC");
        System.out.println(evaluator.evaluate(result));
    }
}
